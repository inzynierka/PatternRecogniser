// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PatternRecogniser.Models;

namespace PatternRecogniser.backupMigrations
{
    [DbContext(typeof(PatternRecogniserDBContext))]
    partial class PatternRecogniserDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ExperimentExperimentList", b =>
                {
                    b.Property<int>("experimentListsexperimentListId")
                        .HasColumnType("integer");

                    b.Property<int>("experimentsexperimentId")
                        .HasColumnType("integer");

                    b.HasKey("experimentListsexperimentListId", "experimentsexperimentId");

                    b.HasIndex("experimentsexperimentId");

                    b.ToTable("ExperimentExperimentList");
                });

            modelBuilder.Entity("PatternRecogniser.Models.Experiment", b =>
                {
                    b.Property<int>("experimentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("extendedModelId")
                        .HasColumnType("integer");

                    b.HasKey("experimentId");

                    b.HasIndex("extendedModelId");

                    b.ToTable("experiment");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ExperimentList", b =>
                {
                    b.Property<int>("experimentListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("experimentType")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("userLogin")
                        .HasColumnType("text");

                    b.HasKey("experimentListId");

                    b.HasIndex("userLogin", "name")
                        .IsUnique();

                    b.ToTable("experimentList");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ExtendedModel", b =>
                {
                    b.Property<int>("extendedModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("distribution")
                        .HasColumnType("integer");

                    b.Property<byte[]>("modelInBytes")
                        .HasColumnType("bytea");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("userLogin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("extendedModelId");

                    b.HasIndex("userLogin", "name")
                        .IsUnique();

                    b.ToTable("extendedModel");
                });

            modelBuilder.Entity("PatternRecogniser.Models.Pattern", b =>
                {
                    b.Property<int>("patternId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("extendedModelId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<byte[]>("picture")
                        .HasColumnType("bytea");

                    b.HasKey("patternId");

                    b.HasIndex("extendedModelId");

                    b.ToTable("pattern");
                });

            modelBuilder.Entity("PatternRecogniser.Models.RecognisedPatterns", b =>
                {
                    b.Property<int>("recognisedPatternsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("PatternRecognitionExperimentexperimentId")
                        .HasColumnType("integer");

                    b.Property<int>("patternId")
                        .HasColumnType("integer");

                    b.Property<double>("probability")
                        .HasColumnType("double precision");

                    b.HasKey("recognisedPatternsId");

                    b.HasIndex("PatternRecognitionExperimentexperimentId");

                    b.HasIndex("patternId");

                    b.ToTable("recognisedPatterns");
                });

            modelBuilder.Entity("PatternRecogniser.Models.User", b =>
                {
                    b.Property<string>("login")
                        .HasColumnType("text");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("exsistUnsavePatternRecognitionExperiment")
                        .HasColumnType("boolean");

                    b.Property<string>("hashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("lastCheckModel")
                        .HasColumnType("text");

                    b.Property<DateTime>("lastLog")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("lastModelStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("lastPatternRecognitionExperimentexperimentId")
                        .HasColumnType("integer");

                    b.Property<string>("lastTrainModelName")
                        .HasColumnType("text");

                    b.Property<string>("refreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("refreshTokenExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("login");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("lastPatternRecognitionExperimentexperimentId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ValidationSet", b =>
                {
                    b.Property<int>("validationSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("experimentId")
                        .HasColumnType("integer");

                    b.Property<int>("recognisedPatternId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("testedPattern")
                        .HasColumnType("bytea");

                    b.Property<int>("truePatternId")
                        .HasColumnType("integer");

                    b.HasKey("validationSetId");

                    b.HasIndex("experimentId");

                    b.HasIndex("recognisedPatternId");

                    b.HasIndex("truePatternId");

                    b.ToTable("validationSet");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ModelTrainingExperiment", b =>
                {
                    b.HasBaseType("PatternRecogniser.Models.Experiment");

                    b.Property<double>("accuracy")
                        .HasColumnType("double precision");

                    b.Property<int[]>("confusionMatrix")
                        .HasColumnType("integer[]");

                    b.Property<int?>("extendedModelId1")
                        .HasColumnType("integer");

                    b.Property<double>("missRate")
                        .HasColumnType("double precision");

                    b.Property<double>("precision")
                        .HasColumnType("double precision");

                    b.Property<double>("recall")
                        .HasColumnType("double precision");

                    b.Property<double>("specificity")
                        .HasColumnType("double precision");

                    b.HasIndex("extendedModelId1")
                        .IsUnique();

                    b.ToTable("ModelTrainingExperiment");
                });

            modelBuilder.Entity("PatternRecogniser.Models.PatternRecognitionExperiment", b =>
                {
                    b.HasBaseType("PatternRecogniser.Models.Experiment");

                    b.Property<byte[]>("testedPattern")
                        .HasColumnType("bytea");

                    b.ToTable("PatternRecognitionExperiment");
                });

            modelBuilder.Entity("ExperimentExperimentList", b =>
                {
                    b.HasOne("PatternRecogniser.Models.ExperimentList", null)
                        .WithMany()
                        .HasForeignKey("experimentListsexperimentListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatternRecogniser.Models.Experiment", null)
                        .WithMany()
                        .HasForeignKey("experimentsexperimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatternRecogniser.Models.Experiment", b =>
                {
                    b.HasOne("PatternRecogniser.Models.ExtendedModel", "extendedModel")
                        .WithMany("experiments")
                        .HasForeignKey("extendedModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("extendedModel");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ExperimentList", b =>
                {
                    b.HasOne("PatternRecogniser.Models.User", "user")
                        .WithMany("experimentLists")
                        .HasForeignKey("userLogin");

                    b.Navigation("user");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ExtendedModel", b =>
                {
                    b.HasOne("PatternRecogniser.Models.User", "user")
                        .WithMany("extendedModel")
                        .HasForeignKey("userLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("PatternRecogniser.Models.Pattern", b =>
                {
                    b.HasOne("PatternRecogniser.Models.ExtendedModel", "extendedModel")
                        .WithMany("patterns")
                        .HasForeignKey("extendedModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("extendedModel");
                });

            modelBuilder.Entity("PatternRecogniser.Models.RecognisedPatterns", b =>
                {
                    b.HasOne("PatternRecogniser.Models.PatternRecognitionExperiment", null)
                        .WithMany("recognisedPatterns")
                        .HasForeignKey("PatternRecognitionExperimentexperimentId");

                    b.HasOne("PatternRecogniser.Models.Pattern", "pattern")
                        .WithMany()
                        .HasForeignKey("patternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pattern");
                });

            modelBuilder.Entity("PatternRecogniser.Models.User", b =>
                {
                    b.HasOne("PatternRecogniser.Models.PatternRecognitionExperiment", "lastPatternRecognitionExperiment")
                        .WithMany()
                        .HasForeignKey("lastPatternRecognitionExperimentexperimentId");

                    b.Navigation("lastPatternRecognitionExperiment");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ValidationSet", b =>
                {
                    b.HasOne("PatternRecogniser.Models.ModelTrainingExperiment", "modelTrainingExperiment")
                        .WithMany("validationSet")
                        .HasForeignKey("experimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatternRecogniser.Models.Pattern", "recognisedPattern")
                        .WithMany()
                        .HasForeignKey("recognisedPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatternRecogniser.Models.Pattern", "truePattern")
                        .WithMany()
                        .HasForeignKey("truePatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("modelTrainingExperiment");

                    b.Navigation("recognisedPattern");

                    b.Navigation("truePattern");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ModelTrainingExperiment", b =>
                {
                    b.HasOne("PatternRecogniser.Models.Experiment", null)
                        .WithOne()
                        .HasForeignKey("PatternRecogniser.Models.ModelTrainingExperiment", "experimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatternRecogniser.Models.ExtendedModel", null)
                        .WithOne("modelTrainingExperiment")
                        .HasForeignKey("PatternRecogniser.Models.ModelTrainingExperiment", "extendedModelId1");
                });

            modelBuilder.Entity("PatternRecogniser.Models.PatternRecognitionExperiment", b =>
                {
                    b.HasOne("PatternRecogniser.Models.Experiment", null)
                        .WithOne()
                        .HasForeignKey("PatternRecogniser.Models.PatternRecognitionExperiment", "experimentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatternRecogniser.Models.ExtendedModel", b =>
                {
                    b.Navigation("experiments");

                    b.Navigation("modelTrainingExperiment");

                    b.Navigation("patterns");
                });

            modelBuilder.Entity("PatternRecogniser.Models.User", b =>
                {
                    b.Navigation("experimentLists");

                    b.Navigation("extendedModel");
                });

            modelBuilder.Entity("PatternRecogniser.Models.ModelTrainingExperiment", b =>
                {
                    b.Navigation("validationSet");
                });

            modelBuilder.Entity("PatternRecogniser.Models.PatternRecognitionExperiment", b =>
                {
                    b.Navigation("recognisedPatterns");
                });
#pragma warning restore 612, 618
        }
    }
}
