//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { BASE_URL } from "./ApiServiceConfig";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiService {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : BASE_URL;
    }

    /**
     * Rejestracja
     * @param body (optional) 
     * @return Success
     */
    signUp(body: SignUp): Promise<any> {
        let url_ = this.baseUrl + "/SignUp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSignUp(_response);
        });
    }

    protected processSignUp(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return Promise.reject<any>(_responseText);
            });
        }
        return Promise.resolve<any>(response);
    }

    /**
     * Logowanie
     * @param body (optional) 
     * @return Success
     */
    logIn(body: LogIn): Promise<any> {
        let url_ = this.baseUrl + "/LogIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogIn(_response);
        });
    }

    protected processLogIn(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        return Promise.resolve<any>(response);
    }

    /**
     * Tworzenie listy
     * @param experimentListName (optional) 
     * @param experimentType (optional) 
     * @return Success
     */
    createExperimentList(experimentListName: string | undefined, experimentType: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/createExperimentList?";
        if (experimentListName === null)
            throw new Error("The parameter 'experimentListName' cannot be null.");
        else if (experimentListName !== undefined)
            url_ += "experimentListName=" + encodeURIComponent("" + experimentListName) + "&";
        if (experimentType === null)
            throw new Error("The parameter 'experimentType' cannot be null.");
        else if (experimentType !== undefined)
            url_ += "experimentType=" + encodeURIComponent("" + experimentType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateExperimentList(_response);
        });
    }

    protected processCreateExperimentList(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Dodawanie eksperymentu trenowania
     * @param experimentListName (optional) 
     * @param experimentId (optional) 
     * @return Success
     */
    addModelTrainingExperiment(experimentListName: string | undefined, experimentId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/addModelTrainingExperiment?";
        if (experimentListName === null)
            throw new Error("The parameter 'experimentListName' cannot be null.");
        else if (experimentListName !== undefined)
            url_ += "experimentListName=" + encodeURIComponent("" + experimentListName) + "&";
        if (experimentId === null)
            throw new Error("The parameter 'experimentId' cannot be null.");
        else if (experimentId !== undefined)
            url_ += "experimentId=" + encodeURIComponent("" + experimentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddModelTrainingExperiment(_response);
        });
    }

    protected processAddModelTrainingExperiment(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Dodawania eksperymentu rozpoznawania znaku
     * @param experimentListName (optional) 
     * @return Success
     */
    addPatternRecognitionExperiment(experimentListName: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/addPatternRecognitionExperiment?";
        if (experimentListName === null)
            throw new Error("The parameter 'experimentListName' cannot be null.");
        else if (experimentListName !== undefined)
            url_ += "experimentListName=" + encodeURIComponent("" + experimentListName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddPatternRecognitionExperiment(_response);
        });
    }

    protected processAddPatternRecognitionExperiment(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Pobiera listy
     * @return Success
     */
    getLists(): Promise<void> {
        let url_ = this.baseUrl + "/GetLists";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLists(_response);
        });
    }

    protected processGetLists(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Pobiera eksperymenty z danej listy
     * @param experimentListName (optional) 
     * @return Success
     */
    getExperiments(experimentListName: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/GetExperiments?";
        if (experimentListName === null)
            throw new Error("The parameter 'experimentListName' cannot be null.");
        else if (experimentListName !== undefined)
            url_ += "experimentListName=" + encodeURIComponent("" + experimentListName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetExperiments(_response);
        });
    }

    protected processGetExperiments(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Rozpoznawanie znaku
     * @param modelName (optional) 
     * @param pattern (optional) 
     * @return Success
     */
    patternRecognition(modelName: string | undefined, pattern: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PatternRecognition?";
        if (modelName === null)
            throw new Error("The parameter 'modelName' cannot be null.");
        else if (modelName !== undefined)
            url_ += "modelName=" + encodeURIComponent("" + modelName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (pattern === null || pattern === undefined)
            throw new Error("The parameter 'pattern' cannot be null.");
        else
            content_.append("pattern", pattern.data, pattern.fileName ? pattern.fileName : "pattern");

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPatternRecognition(_response);
        });
    }

    protected processPatternRecognition(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Zwraca dane wszystkich użytkowników. Zapytanie nie pojawi się w finalnej wersji.
     * @return Success
     */
    users(): Promise<User[]> {
        let url_ = this.baseUrl + "/TemporeryRequests/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsers(_response);
        });
    }

    protected processUsers(response: Response): Promise<User[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    refresh(body: Tokens | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Token/refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefresh(_response);
        });
    }

    protected processRefresh(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    revoke(): Promise<void> {
        let url_ = this.baseUrl + "/Token/revoke";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRevoke(_response);
        });
    }

    protected processRevoke(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Dodaj rządanie trenowania do kolejki.
     * @param modelName (optional) 
     * @param distributionType (optional) 
     * @param trainingSet (optional) 
     * @return Success
     */
    trainModel(modelName: string | undefined, distributionType: DistributionType | undefined, trainingSet: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainModel?";
        if (modelName === null)
            throw new Error("The parameter 'modelName' cannot be null.");
        else if (modelName !== undefined)
            url_ += "modelName=" + encodeURIComponent("" + modelName) + "&";
        if (distributionType === null)
            throw new Error("The parameter 'distributionType' cannot be null.");
        else if (distributionType !== undefined)
            url_ += "distributionType=" + encodeURIComponent("" + distributionType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (trainingSet === null || trainingSet === undefined)
            throw new Error("The parameter 'trainingSet' cannot be null.");
        else
            content_.append("trainingSet", trainingSet.data, trainingSet.fileName ? trainingSet.fileName : "trainingSet");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainModel(_response);
        });
    }

    protected processTrainModel(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Sprawdź miejsce w kolejce danego użytkownika
     * @return Success
     */
    numberInQueue(): Promise<void> {
        let url_ = this.baseUrl + "/TrainingModel/NumberInQueue";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNumberInQueue(_response);
        });
    }

    protected processNumberInQueue(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Usuwanie z kolejki
     * @return Success
     */
    cancel(): Promise<void> {
        let url_ = this.baseUrl + "/Cancel";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancel(_response);
        });
    }

    protected processCancel(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Pobiera dane gdy model jest w trakcie trenowania.
     * @param modelName (optional) 
     * @return Success
     */
    trainUpdate(modelName: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TrainUpdate?";
        if (modelName === null)
            throw new Error("The parameter 'modelName' cannot be null.");
        else if (modelName !== undefined)
            url_ += "modelName=" + encodeURIComponent("" + modelName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTrainUpdate(_response);
        });
    }

    protected processTrainUpdate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Pobiera Statystyki modelu
     * @param modelName (optional) 
     * @return Success
     */
    getModelStatistics(modelName: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/GetModelStatistics?";
        if (modelName === null)
            throw new Error("The parameter 'modelName' cannot be null.");
        else if (modelName !== undefined)
            url_ += "modelName=" + encodeURIComponent("" + modelName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModelStatistics(_response);
        });
    }

    protected processGetModelStatistics(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Pobiera modele
     * @return Success
     */
    getModels(token : string): Promise<void> {
        let url_ = this.baseUrl + "/GetModels";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': 'Bearer ' + token,
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModels(_response);
        });
    }

    protected processGetModels(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Pobiera aktualny status modelu
     * @param modelName (optional) 
     * @return Success
     */
    getModelStatus(modelName: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/GetModelStatus?";
        if (modelName === null)
            throw new Error("The parameter 'modelName' cannot be null.");
        else if (modelName !== undefined)
            url_ += "modelName=" + encodeURIComponent("" + modelName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetModelStatus(_response);
        });
    }

    protected processGetModelStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export enum DistributionType {
    _0 = 0,
    _1 = 1,
}

export class Experiment implements IExperiment {
    experimentId?: number;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;
    experimentLists?: ExperimentList[] | undefined;

    constructor(data?: IExperiment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.experimentId = _data["experimentId"];
            this.extendedModelId = _data["extendedModelId"];
            this.extendedModel = _data["extendedModel"] ? ExtendedModel.fromJS(_data["extendedModel"]) : <any>undefined;
            if (Array.isArray(_data["experimentLists"])) {
                this.experimentLists = [] as any;
                for (let item of _data["experimentLists"])
                    this.experimentLists!.push(ExperimentList.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Experiment {
        data = typeof data === 'object' ? data : {};
        let result = new Experiment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["experimentId"] = this.experimentId;
        data["extendedModelId"] = this.extendedModelId;
        data["extendedModel"] = this.extendedModel ? this.extendedModel.toJSON() : <any>undefined;
        if (Array.isArray(this.experimentLists)) {
            data["experimentLists"] = [];
            for (let item of this.experimentLists)
                data["experimentLists"].push(item.toJSON());
        }
        return data;
    }
}

export interface IExperiment {
    experimentId?: number;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;
    experimentLists?: ExperimentList[] | undefined;
}

export class ExperimentList implements IExperimentList {
    experimentListId?: number;
    name?: string | undefined;
    experimentType?: string | undefined;
    userLogin?: string | undefined;
    user?: User;
    experiments?: Experiment[] | undefined;

    constructor(data?: IExperimentList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.experimentListId = _data["experimentListId"];
            this.name = _data["name"];
            this.experimentType = _data["experimentType"];
            this.userLogin = _data["userLogin"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            if (Array.isArray(_data["experiments"])) {
                this.experiments = [] as any;
                for (let item of _data["experiments"])
                    this.experiments!.push(Experiment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExperimentList {
        data = typeof data === 'object' ? data : {};
        let result = new ExperimentList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["experimentListId"] = this.experimentListId;
        data["name"] = this.name;
        data["experimentType"] = this.experimentType;
        data["userLogin"] = this.userLogin;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.experiments)) {
            data["experiments"] = [];
            for (let item of this.experiments)
                data["experiments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IExperimentList {
    experimentListId?: number;
    name?: string | undefined;
    experimentType?: string | undefined;
    userLogin?: string | undefined;
    user?: User;
    experiments?: Experiment[] | undefined;
}

export class ExtendedModel implements IExtendedModel {
    extendedModelId?: number;
    userLogin!: string;
    name?: string | undefined;
    distribution?: DistributionType;
    user?: User;
    patterns?: Pattern[] | undefined;
    modelTrainingExperiment?: ModelTrainingExperiment;
    experiments?: Experiment[] | undefined;

    constructor(data?: IExtendedModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.extendedModelId = _data["extendedModelId"];
            this.userLogin = _data["userLogin"];
            this.name = _data["name"];
            this.distribution = _data["distribution"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            if (Array.isArray(_data["patterns"])) {
                this.patterns = [] as any;
                for (let item of _data["patterns"])
                    this.patterns!.push(Pattern.fromJS(item));
            }
            this.modelTrainingExperiment = _data["modelTrainingExperiment"] ? ModelTrainingExperiment.fromJS(_data["modelTrainingExperiment"]) : <any>undefined;
            if (Array.isArray(_data["experiments"])) {
                this.experiments = [] as any;
                for (let item of _data["experiments"])
                    this.experiments!.push(Experiment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ExtendedModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExtendedModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extendedModelId"] = this.extendedModelId;
        data["userLogin"] = this.userLogin;
        data["name"] = this.name;
        data["distribution"] = this.distribution;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (Array.isArray(this.patterns)) {
            data["patterns"] = [];
            for (let item of this.patterns)
                data["patterns"].push(item.toJSON());
        }
        data["modelTrainingExperiment"] = this.modelTrainingExperiment ? this.modelTrainingExperiment.toJSON() : <any>undefined;
        if (Array.isArray(this.experiments)) {
            data["experiments"] = [];
            for (let item of this.experiments)
                data["experiments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IExtendedModel {
    extendedModelId?: number;
    userLogin: string;
    name?: string | undefined;
    distribution?: DistributionType;
    user?: User;
    patterns?: Pattern[] | undefined;
    modelTrainingExperiment?: ModelTrainingExperiment;
    experiments?: Experiment[] | undefined;
}

export class LogIn implements ILogIn {
    login?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILogIn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LogIn {
        data = typeof data === 'object' ? data : {};
        let result = new LogIn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        return data;
    }
}

export interface ILogIn {
    login?: string | undefined;
    password?: string | undefined;
}

export class ModelTrainingExperiment implements IModelTrainingExperiment {
    experimentId?: number;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;
    experimentLists?: ExperimentList[] | undefined;
    accuracy?: number;
    precision?: number;
    recall?: number;
    specificity?: number;
    missRate?: number;
    confusionMatrix?: number[] | undefined;
    validationSet?: ValidationSet[] | undefined;

    constructor(data?: IModelTrainingExperiment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.experimentId = _data["experimentId"];
            this.extendedModelId = _data["extendedModelId"];
            this.extendedModel = _data["extendedModel"] ? ExtendedModel.fromJS(_data["extendedModel"]) : <any>undefined;
            if (Array.isArray(_data["experimentLists"])) {
                this.experimentLists = [] as any;
                for (let item of _data["experimentLists"])
                    this.experimentLists!.push(ExperimentList.fromJS(item));
            }
            this.accuracy = _data["accuracy"];
            this.precision = _data["precision"];
            this.recall = _data["recall"];
            this.specificity = _data["specificity"];
            this.missRate = _data["missRate"];
            if (Array.isArray(_data["confusionMatrix"])) {
                this.confusionMatrix = [] as any;
                for (let item of _data["confusionMatrix"])
                    this.confusionMatrix!.push(item);
            }
            if (Array.isArray(_data["validationSet"])) {
                this.validationSet = [] as any;
                for (let item of _data["validationSet"])
                    this.validationSet!.push(ValidationSet.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelTrainingExperiment {
        data = typeof data === 'object' ? data : {};
        let result = new ModelTrainingExperiment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["experimentId"] = this.experimentId;
        data["extendedModelId"] = this.extendedModelId;
        data["extendedModel"] = this.extendedModel ? this.extendedModel.toJSON() : <any>undefined;
        if (Array.isArray(this.experimentLists)) {
            data["experimentLists"] = [];
            for (let item of this.experimentLists)
                data["experimentLists"].push(item.toJSON());
        }
        data["accuracy"] = this.accuracy;
        data["precision"] = this.precision;
        data["recall"] = this.recall;
        data["specificity"] = this.specificity;
        data["missRate"] = this.missRate;
        if (Array.isArray(this.confusionMatrix)) {
            data["confusionMatrix"] = [];
            for (let item of this.confusionMatrix)
                data["confusionMatrix"].push(item);
        }
        if (Array.isArray(this.validationSet)) {
            data["validationSet"] = [];
            for (let item of this.validationSet)
                data["validationSet"].push(item.toJSON());
        }
        return data;
    }
}

export interface IModelTrainingExperiment {
    experimentId?: number;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;
    experimentLists?: ExperimentList[] | undefined;
    accuracy?: number;
    precision?: number;
    recall?: number;
    specificity?: number;
    missRate?: number;
    confusionMatrix?: number[] | undefined;
    validationSet?: ValidationSet[] | undefined;
}

export class Pattern implements IPattern {
    patternId?: number;
    name?: string | undefined;
    picture?: string | undefined;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;

    constructor(data?: IPattern) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patternId = _data["patternId"];
            this.name = _data["name"];
            this.picture = _data["picture"];
            this.extendedModelId = _data["extendedModelId"];
            this.extendedModel = _data["extendedModel"] ? ExtendedModel.fromJS(_data["extendedModel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Pattern {
        data = typeof data === 'object' ? data : {};
        let result = new Pattern();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patternId"] = this.patternId;
        data["name"] = this.name;
        data["picture"] = this.picture;
        data["extendedModelId"] = this.extendedModelId;
        data["extendedModel"] = this.extendedModel ? this.extendedModel.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPattern {
    patternId?: number;
    name?: string | undefined;
    picture?: string | undefined;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;
}

export class PatternRecognitionExperiment implements IPatternRecognitionExperiment {
    experimentId?: number;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;
    experimentLists?: ExperimentList[] | undefined;
    testedPattern?: string | undefined;
    recognisedPatterns?: RecognisedPatterns[] | undefined;

    constructor(data?: IPatternRecognitionExperiment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.experimentId = _data["experimentId"];
            this.extendedModelId = _data["extendedModelId"];
            this.extendedModel = _data["extendedModel"] ? ExtendedModel.fromJS(_data["extendedModel"]) : <any>undefined;
            if (Array.isArray(_data["experimentLists"])) {
                this.experimentLists = [] as any;
                for (let item of _data["experimentLists"])
                    this.experimentLists!.push(ExperimentList.fromJS(item));
            }
            this.testedPattern = _data["testedPattern"];
            if (Array.isArray(_data["recognisedPatterns"])) {
                this.recognisedPatterns = [] as any;
                for (let item of _data["recognisedPatterns"])
                    this.recognisedPatterns!.push(RecognisedPatterns.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatternRecognitionExperiment {
        data = typeof data === 'object' ? data : {};
        let result = new PatternRecognitionExperiment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["experimentId"] = this.experimentId;
        data["extendedModelId"] = this.extendedModelId;
        data["extendedModel"] = this.extendedModel ? this.extendedModel.toJSON() : <any>undefined;
        if (Array.isArray(this.experimentLists)) {
            data["experimentLists"] = [];
            for (let item of this.experimentLists)
                data["experimentLists"].push(item.toJSON());
        }
        data["testedPattern"] = this.testedPattern;
        if (Array.isArray(this.recognisedPatterns)) {
            data["recognisedPatterns"] = [];
            for (let item of this.recognisedPatterns)
                data["recognisedPatterns"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPatternRecognitionExperiment {
    experimentId?: number;
    extendedModelId?: number;
    extendedModel?: ExtendedModel;
    experimentLists?: ExperimentList[] | undefined;
    testedPattern?: string | undefined;
    recognisedPatterns?: RecognisedPatterns[] | undefined;
}

export class RecognisedPatterns implements IRecognisedPatterns {
    recognisedPatternsId?: number;
    patternId?: number;
    probability?: number;
    pattern?: Pattern;

    constructor(data?: IRecognisedPatterns) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recognisedPatternsId = _data["recognisedPatternsId"];
            this.patternId = _data["patternId"];
            this.probability = _data["probability"];
            this.pattern = _data["pattern"] ? Pattern.fromJS(_data["pattern"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RecognisedPatterns {
        data = typeof data === 'object' ? data : {};
        let result = new RecognisedPatterns();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recognisedPatternsId"] = this.recognisedPatternsId;
        data["patternId"] = this.patternId;
        data["probability"] = this.probability;
        data["pattern"] = this.pattern ? this.pattern.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRecognisedPatterns {
    recognisedPatternsId?: number;
    patternId?: number;
    probability?: number;
    pattern?: Pattern;
}

export class SignUp implements ISignUp {
    login?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;

    constructor(data?: ISignUp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): SignUp {
        data = typeof data === 'object' ? data : {};
        let result = new SignUp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        data["email"] = this.email;
        return data;
    }
}

export interface ISignUp {
    login?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
}

export class Tokens implements ITokens {
    accessToken?: string | undefined;
    refreshToken?: string | undefined;

    constructor(data?: ITokens) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): Tokens {
        data = typeof data === 'object' ? data : {};
        let result = new Tokens();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface ITokens {
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
}

export class User implements IUser {
    login?: string | undefined;
    email!: string;
    hashedPassword?: string | undefined;
    exsistUnsavePatternRecognitionExperiment?: boolean;
    lastTrainModelName?: string | undefined;
    createDate?: Date;
    lastLog?: Date;
    refreshToken?: string | undefined;
    refreshTokenExpiryDate?: Date;
    extendedModel?: ExtendedModel[] | undefined;
    experimentLists?: ExperimentList[] | undefined;
    lastPatternRecognitionExperiment?: PatternRecognitionExperiment;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.email = _data["email"];
            this.hashedPassword = _data["hashedPassword"];
            this.exsistUnsavePatternRecognitionExperiment = _data["exsistUnsavePatternRecognitionExperiment"];
            this.lastTrainModelName = _data["lastTrainModelName"];
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>undefined;
            this.lastLog = _data["lastLog"] ? new Date(_data["lastLog"].toString()) : <any>undefined;
            this.refreshToken = _data["refreshToken"];
            this.refreshTokenExpiryDate = _data["refreshTokenExpiryDate"] ? new Date(_data["refreshTokenExpiryDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["extendedModel"])) {
                this.extendedModel = [] as any;
                for (let item of _data["extendedModel"])
                    this.extendedModel!.push(ExtendedModel.fromJS(item));
            }
            if (Array.isArray(_data["experimentLists"])) {
                this.experimentLists = [] as any;
                for (let item of _data["experimentLists"])
                    this.experimentLists!.push(ExperimentList.fromJS(item));
            }
            this.lastPatternRecognitionExperiment = _data["lastPatternRecognitionExperiment"] ? PatternRecognitionExperiment.fromJS(_data["lastPatternRecognitionExperiment"]) : <any>undefined;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["email"] = this.email;
        data["hashedPassword"] = this.hashedPassword;
        data["exsistUnsavePatternRecognitionExperiment"] = this.exsistUnsavePatternRecognitionExperiment;
        data["lastTrainModelName"] = this.lastTrainModelName;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["lastLog"] = this.lastLog ? this.lastLog.toISOString() : <any>undefined;
        data["refreshToken"] = this.refreshToken;
        data["refreshTokenExpiryDate"] = this.refreshTokenExpiryDate ? this.refreshTokenExpiryDate.toISOString() : <any>undefined;
        if (Array.isArray(this.extendedModel)) {
            data["extendedModel"] = [];
            for (let item of this.extendedModel)
                data["extendedModel"].push(item.toJSON());
        }
        if (Array.isArray(this.experimentLists)) {
            data["experimentLists"] = [];
            for (let item of this.experimentLists)
                data["experimentLists"].push(item.toJSON());
        }
        data["lastPatternRecognitionExperiment"] = this.lastPatternRecognitionExperiment ? this.lastPatternRecognitionExperiment.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUser {
    login?: string | undefined;
    email: string;
    hashedPassword?: string | undefined;
    exsistUnsavePatternRecognitionExperiment?: boolean;
    lastTrainModelName?: string | undefined;
    createDate?: Date;
    lastLog?: Date;
    refreshToken?: string | undefined;
    refreshTokenExpiryDate?: Date;
    extendedModel?: ExtendedModel[] | undefined;
    experimentLists?: ExperimentList[] | undefined;
    lastPatternRecognitionExperiment?: PatternRecognitionExperiment;
}

export class ValidationSet implements IValidationSet {
    validationSetId?: number;
    testedPattern?: string | undefined;
    truePatternId?: number;
    recognisedPatternId?: number;
    experimentId?: number;
    modelTrainingExperiment?: ModelTrainingExperiment;
    truePattern?: Pattern;
    recognisedPattern?: Pattern;

    constructor(data?: IValidationSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.validationSetId = _data["validationSetId"];
            this.testedPattern = _data["testedPattern"];
            this.truePatternId = _data["truePatternId"];
            this.recognisedPatternId = _data["recognisedPatternId"];
            this.experimentId = _data["experimentId"];
            this.modelTrainingExperiment = _data["modelTrainingExperiment"] ? ModelTrainingExperiment.fromJS(_data["modelTrainingExperiment"]) : <any>undefined;
            this.truePattern = _data["truePattern"] ? Pattern.fromJS(_data["truePattern"]) : <any>undefined;
            this.recognisedPattern = _data["recognisedPattern"] ? Pattern.fromJS(_data["recognisedPattern"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ValidationSet {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validationSetId"] = this.validationSetId;
        data["testedPattern"] = this.testedPattern;
        data["truePatternId"] = this.truePatternId;
        data["recognisedPatternId"] = this.recognisedPatternId;
        data["experimentId"] = this.experimentId;
        data["modelTrainingExperiment"] = this.modelTrainingExperiment ? this.modelTrainingExperiment.toJSON() : <any>undefined;
        data["truePattern"] = this.truePattern ? this.truePattern.toJSON() : <any>undefined;
        data["recognisedPattern"] = this.recognisedPattern ? this.recognisedPattern.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValidationSet {
    validationSetId?: number;
    testedPattern?: string | undefined;
    truePatternId?: number;
    recognisedPatternId?: number;
    experimentId?: number;
    modelTrainingExperiment?: ModelTrainingExperiment;
    truePattern?: Pattern;
    recognisedPattern?: Pattern;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}